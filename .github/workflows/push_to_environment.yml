name: BT Org Test and Deploy

on:
    workflow_call:
        inputs:
            app-name:
                required: true
                type: string
            build-target-path:
                required: true
                type: string
            publish-target-path:
                required: true
                type: string
            octo-package-name:
                required: true
                type: string
            octo-project-name:
                required: true
                type: string
            octo-channel:
                required: false
                type: string
            octo-space:
                required: false
                type: string
            dotnet-version:
                required: false
                type: string
        secrets:
            nuget-source-access-token:
                required: true
            nuget-source-url:
                required: true
            octo-api-key:
                required: true
            octo-cli-server:
                required: true

jobs:
    build_and_test:
        runs-on: windows-latest
        steps:
            - uses: actions/checkout@v2

            - name: Setup .NET Default
              uses: actions/setup-dotnet@v1
              if: ${{ inputs.dotnet-version == '' }}
              with:
                  dotnet-version: 6.0.x
                  source-url: ${{ secrets.nuget-source-url }}
              env:
                  NUGET_AUTH_TOKEN: ${{ secrets.nuget-source-access-token }}

            - name: Setup .NET
              uses: actions/setup-dotnet@v1
              if: ${{ inputs.dotnet-version != '' }}
              with:
                  dotnet-version: ${{ inputs.dotnet-version }}
                  source-url: ${{ secrets.nuget-source-url }}
              env:
                  NUGET_AUTH_TOKEN: ${{ secrets.nuget-source-access-token }}

            - name: Restore dependencies
              run: dotnet restore ${{ inputs.build-target-path }}

            - name: Build
              run: dotnet build --no-restore ${{ inputs.build-target-path }}

            - name: Test
              run: dotnet test --no-build --verbosity normal ${{ inputs.build-target-path }}

            - name: Publish
              run: dotnet publish ${{ inputs.publish-target-path }} --output ./publish/${{ inputs.app-name }}/ -c Release

            - name: Save publish output
              uses: actions/upload-artifact@v2
              with:
                  name: ${{ inputs.app-name }}
                  path: ./publish/${{ inputs.app-name }}/

    deploy_octopus_package:
        needs: build_and_test
        runs-on: ubuntu-latest
        env:
            OCTOPUS_URL: ${{ secrets.OCTOPUS_CLI_SERVER }}
            OCTOPUS_API_KEY: ${{ secrets.OCTOPUS_APIKEY }}
            PACKAGE_VERSION: $(date +'%Y.%m.%d').$GITHUB_RUN_NUMBER
        steps:
            - name: Set Octopus Space Environment Variable
              run: echo "OCTOPUS_SPACE=Web" >> $GITHUB_ENV
              if: ${{ inputs.octo-space == '' }}

            - name: Set Octopus Space Environment Variable
              run: echo "OCTOPUS_SPACE=${{ inputs.octo-space }}" >> $GITHUB_ENV
              if: ${{ inputs.octo-space != '' }}

            - name: Download publish output
              uses: actions/download-artifact@v2
              with:
                  name: ${{ inputs.app-name }}
                  path: ./publish/${{ inputs.app-name }}/

            - name: Install Octopus Deploy
              uses: OctopusDeploy/install-octopus-cli-action@v3
              with:
                  version: "*"

            - name: Create Package Directory
              run: mkdir package

            - name: Create Octopus Package
              run: octopus package zip create --id ${{ inputs.octo-package-name }} --version "${{ env.PACKAGE_VERSION }}" --base-path "./publish/${{ inputs.app-name }}" --out-folder "./package"

            - name: Push Octopus Package
              run: octopus package upload --package "./package/${{ inputs.octo-package-name }}.${{ env.PACKAGE_VERSION }}.zip"

            - name: Create Octopus Release For Default Environment
              if: ${{ inputs.octo-channel == '' }}
              run: octopus release create --project "${{ inputs.octo-project-name }}" --version "${{ env.PACKAGE_VERSION }}" --package "${{ inputs.octo-package-name }}:${{ env.PACKAGE_VERSION }}"

            - name: Create Octopus Release for Channel
              if: ${{ inputs.octo-channel != '' }}
              run: octopus release create --project "${{ inputs.octo-project-name }}" --channel ${{ inputs.octo-channel }} --version "${{ env.PACKAGE_VERSION }}" --package "${{ inputs.octo-package-name }}:${{ env.PACKAGE_VERSION }}"
